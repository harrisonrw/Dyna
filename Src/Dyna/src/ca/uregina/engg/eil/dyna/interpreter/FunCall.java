/* Generated By:JJTree: Do not edit this line. FunCall.java */

package ca.uregina.engg.eil.dyna.interpreter;

import ca.uregina.engg.eil.dyna.model.KnowledgeComponent;
import ca.uregina.engg.eil.dyna.model.KnowledgeTestCase;
import ca.uregina.engg.eil.dyna.model.Task;
import java.util.Hashtable;
import java.util.Vector;

public class FunCall extends SimpleNode {
  public FunCall(int id) {
    super(id);
  }

  public FunCall(TBLParser p, int id) {
    super(p, id);
  }

  public void interpret() throws ParseException
  {
      Interpreter interp = InterpreterManager.getInterpreterManager().getInterpreter();
      Hashtable<String, Object> symbolTable = SymbolTableHelper.getSymbolTable();
      Stack stack = Stack.getStack();
      CallStack callStack = CallStack.getCallStack();
      
      // Get the current function.
      KnowledgeComponent parent = callStack.getTop().getItem();
      
      int numChildren = jjtGetNumChildren();
      
      jjtGetChild(0).interpret();
      
      // Get the name of the function (task or test case).
      String name = ((KnowledgeComponent) stack.pop()).getName();
      
      // Get the function (task or test case).
      KnowledgeComponent k = (KnowledgeComponent) symbolTable.get(name);
      
      // Get the arguments (if there are any).
      Vector<Object> argList = new Vector<Object>();
      for (int i = 1; i < numChildren; i++)
      {
          jjtGetChild(i).interpret();
          
          // Get the value from the stack and add it to arg list.
          Object arg = stack.pop();
          argList.add(arg);                    
      }
      
      
      // Store the function in the call stack.
      CallItem func = new CallItem(k);
      callStack.push(func, true);
      
                                                      
      
      
      
      if (func.getItem() instanceof Task)
      {
            interp.runTask(parent, name, argList);     
      }
      else if (func.getItem() instanceof KnowledgeTestCase)
      {
             //((TestInterpreter) interp).runTestCase()
          System.out.println("this is not possible");
      }
      else
      {
          // error
          System.out.println("unknown function type!");
      }
      
      callStack.pop();
           
  }
  
}
