/* Generated By:JJTree: Do not edit this line. DivExpr.java */

/**
 * AST Node for division expression
 *
 * @author Robert Harrison
 * 
 * Energy Informatics Laboratory
 * Faculty of Engineering
 * University of Regina
 * http://www.uregina.ca/engg
 */

package ca.uregina.engg.eil.dyna.interpreter;

import edu.stanford.smi.protege.model.KnowledgeBase;
import java.io.PrintStream;

public class DivExpr extends SimpleNode {
  public DivExpr(int id) {
    super(id);
  }

  public DivExpr(TBLParser p, int id) {
    super(p, id);
  }

  public void interpret() throws ParseException
  {
     jjtGetChild(0).interpret();
     jjtGetChild(1).interpret();

     Interpreter interp = InterpreterManager.getInterpreterManager().getInterpreter();       
     Stack stack = Stack.getStack();
     
     if (stack.peek() instanceof Integer)
     {
         int denom = ((Integer)stack.pop()).intValue();
         int numer = ((Integer)stack.pop()).intValue();
         int value = new Integer(numer / denom);
         
         stack.push(value);                          
     }
     else if (stack.peek() instanceof Float)
     {
         float denom = ((Float)stack.pop()).floatValue();
         float numer = ((Float)stack.pop()).floatValue();
         float value = new Float(numer / denom);
         
         stack.push(value);                 
     }
  }
  
}
