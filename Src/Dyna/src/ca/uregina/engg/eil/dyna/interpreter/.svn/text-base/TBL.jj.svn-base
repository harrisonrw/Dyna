/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./TBL.jj */
/*@egen*//* 
 * TBL.jjt
 *
 * Definition of the Task Behaviour Language (TBL) grammar
 *
 * @author Robert Harrison
 *
 * Energy Informatics Laboratory
 * Faculty of Engineering
 * University of Regina
 * http://www.uregina.ca/engg
 */


options
{
    STATIC=false;                                                                                                                                 
}

PARSER_BEGIN(TBLParser)

package ca.uregina.engg.eil.dyna.interpreter;

public class TBLParser/*@bgen(jjtree)*/implements TBLParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTTBLParserState jjtree = new JJTTBLParserState();

/*@egen*/
}

PARSER_END(TBLParser)


/* Lexer */

SKIP : 
{ 
    " " 
|   "\t" 
|   "\n" 
|   "\r" 
}

/* Pound-style comments. */
SPECIAL_TOKEN: 
{  
    < "#" > : WithinComment1 
}

<WithinComment1> SPECIAL_TOKEN:
{
    < "\n" > : DEFAULT
}

<WithinComment1> MORE: 
{ 
    < ~[] > 
}

TOKEN : 
{
    < POWER : "**" >
|   < MULT : "*" > 
|   < DIV : "/" >
|   < MOD : "%" >
|   < PLUS : "+" >
|   < MINUS : "-">
}

TOKEN :
{
    < EQUALS : "=" >
}

TOKEN :
{
    < EQEQUAL : "==" >
|   < NOTEQUAL : "!=" >
|   < LT : "<" >
|   < GT : ">" >
|   < LTEQUAL : "<=" >
|   < GTEQUAL : ">=" >
}

TOKEN :
{
    < OR : "or" >
|   < AND : "and" >
|   < NOT : "not" >
|   < XOR : "xor" >
}

TOKEN :
{
    < LPAR : "(" >
|   < RPAR : ")" >
|   < DOT : "." >
|   < LCBRACE : "{" >
|   < RCBRACE : "}" >
|   < LBRACK : "[" >
|   < RBRACK : "]" >
|   < COMMA : "," >
}

TOKEN :
{
    < PRINT : "print" >
|   < INT : "int" >
|   < FLOAT : "float" >
|   < BOOLEAN : "boolean" >
|   < STRING : "string" >
|   < CLASS : "class" >
|   < WHILE : "while" >
|   < IF : "if" >
|   < ELSE : "else" >
|   < ASSERT : "assert" >
|   < RETURN : "return" >
|   < TASK : "task" >
|   < SQRT : "sqrt" >
}

TOKEN :
{
    < TRUE : "true" >
|   < FALSE : "false" >
}

TOKEN : 
{ 
    < INT_LITERAL  : ("-")* <DIGITS> > 
|   < FLOAT_LITERAL : ("-")* <DIGITS> "." <DIGITS> >
|   < STRING_LITERAL : "\"" (<LETTER> | <DIGITS> | "_" | " ")* "\""  >
}

TOKEN : 
{ 
    < IDENTIFIER : <LETTER> (<LETTER> | <DIGITS> | "_" | ":")* >
|   < #LETTER : [ "a"-"z", "A"-"Z" ] >
|   < #DIGITS : ( ["0" - "9"] )+  > 
}

/* Parser */

void Start()      :
{/*@bgen(jjtree) Root */
  Root jjtn000 = new Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Root */
    try {
/*@egen*/    
    
    
    ( LOOKAHEAD(2) VarDeclaration()        
      |
      Stmt() )*          
   
    <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TaskDef()         :
{/*@bgen(jjtree) TaskDef */
  TaskDef jjtn000 = new TaskDef(this, JJTTASKDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) TaskDef */
    try {
/*@egen*/
    <TASK> Id() <LPAR> ( LOOKAHEAD(2) VarDeclaration() ( <COMMA> VarDeclaration() )* )* <RPAR>
    (

        Suite()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration()                :
{/*@bgen(jjtree) VarDeclaration */
    VarDeclaration jjtn000 = new VarDeclaration(this, JJTVARDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/   
    Token t;
}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/    
    DataType()
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.m_name = t.image; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/         
}

void DataType()      :
{
}
{    
    StdDataType() 
|   CustomDataType()
}

void StdDataType()             :
{/*@bgen(jjtree) StdDataType */
    StdDataType jjtn000 = new StdDataType(this, JJTSTDDATATYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) StdDataType */
    try {
/*@egen*/    
    ( t = <INT>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ 
      { 
        jjtn000.m_type = INT; 
        jjtn000.m_name = t.image;
      }
    )
|
    ( t = <FLOAT>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
         jjtn000.m_type = FLOAT;
         jjtn000.m_name = t.image;
      }
    )
|
    ( t = <BOOLEAN>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
        jjtn000.m_type = BOOLEAN;
        jjtn000.m_name = t.image;
      }
    )
|
    ( t = <STRING>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
        jjtn000.m_type = STRING;
        jjtn000.m_name = t.image;
      }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CustomDataType()                :
{/*@bgen(jjtree) CustomDataType */
    CustomDataType jjtn000 = new CustomDataType(this, JJTCUSTOMDATATYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) CustomDataType */
    try {
/*@egen*/    
    t = <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { 
        jjtn000.m_type = CLASS; 
        jjtn000.m_name = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmt()      :
{
}
{    
     
    LOOKAHEAD( Primary() <EQUALS> ) Assignment()
|   LOOKAHEAD(2) SimpleStmt()
|   WhileStmt()
|   IfStmt()
|   AssertStmt()
|   ReturnStmt()
|   Suite()
|   TaskDef()
}


void SimpleStmt()      :
{
    Token t;
}
{
    ( 
        Expr()
    |   <PRINT>/*@bgen(jjtree) PrintStmt */
                {
                  PrintStmt jjtn001 = new PrintStmt(this, JJTPRINTSTMT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ Expr()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/
    )    
}

void Assignment()      :
{
}
{
    Primary() <EQUALS>/*@bgen(jjtree) #Assign( 2) */
                       {
                         Assign jjtn001 = new Assign(this, JJTASSIGN);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ Expr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/
}

void Expr()      :
{
}
{
    
    LogicalExpr()
|   <NOT>/*@bgen(jjtree) #NotExpr( 1) */
          {
            NotExpr jjtn001 = new NotExpr(this, JJTNOTEXPR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ LogicalExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
          }
/*@egen*/
}

void LogicalExpr()      :
{
}
{
    CompExpr()
    (
        <OR>/*@bgen(jjtree) #OrExpr( 2) */
             {
               OrExpr jjtn001 = new OrExpr(this, JJTOREXPR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ CompExpr()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/
        | <AND>/*@bgen(jjtree) #AndExpr( 2) */
                {
                  AndExpr jjtn002 = new AndExpr(this, JJTANDEXPR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ CompExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
        | <XOR>/*@bgen(jjtree) #XorExpr( 2) */
                {
                  XorExpr jjtn003 = new XorExpr(this, JJTXOREXPR);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/ CompExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/
    )*
}

void CompExpr()      :
{
}
{
    UnaryExpr()
    (
        <EQEQUAL>/*@bgen(jjtree) #EqEqual( 2) */
                  {
                    EqEqual jjtn001 = new EqEqual(this, JJTEQEQUAL);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/
        | <NOTEQUAL>/*@bgen(jjtree) #NotEqual( 2) */
                     {
                       NotEqual jjtn002 = new NotEqual(this, JJTNOTEQUAL);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
                     }
/*@egen*/
        | <LT>/*@bgen(jjtree) #LT( 2) */
               {
                 LT jjtn003 = new LT(this, JJTLT);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
               }
/*@egen*/
        | <GT>/*@bgen(jjtree) #GT( 2) */
               {
                 GT jjtn004 = new GT(this, JJTGT);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
               }
               try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  2);
                 }
               }
/*@egen*/
        | <LTEQUAL>/*@bgen(jjtree) #LTEqual( 2) */
                    {
                      LTEqual jjtn005 = new LTEqual(this, JJTLTEQUAL);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
                    }
                    try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
                    } catch (Throwable jjte005) {
                      if (jjtc005) {
                        jjtree.clearNodeScope(jjtn005);
                        jjtc005 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte005 instanceof RuntimeException) {
                        throw (RuntimeException)jjte005;
                      }
                      if (jjte005 instanceof ParseException) {
                        throw (ParseException)jjte005;
                      }
                      throw (Error)jjte005;
                    } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005,  2);
                      }
                    }
/*@egen*/
        | <GTEQUAL>/*@bgen(jjtree) #GTEqual( 2) */
                    {
                      GTEqual jjtn006 = new GTEqual(this, JJTGTEQUAL);
                      boolean jjtc006 = true;
                      jjtree.openNodeScope(jjtn006);
                    }
                    try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
                    } catch (Throwable jjte006) {
                      if (jjtc006) {
                        jjtree.clearNodeScope(jjtn006);
                        jjtc006 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte006 instanceof RuntimeException) {
                        throw (RuntimeException)jjte006;
                      }
                      if (jjte006 instanceof ParseException) {
                        throw (ParseException)jjte006;
                      }
                      throw (Error)jjte006;
                    } finally {
                      if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006,  2);
                      }
                    }
/*@egen*/
    )*
}

void UnaryExpr()      :
{    
}
{       
    MultExpr()
    ( 
        <MINUS>/*@bgen(jjtree) #MinusExpr( 2) */
                {
                  MinusExpr jjtn001 = new MinusExpr(this, JJTMINUSEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ MultExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
        | <PLUS>/*@bgen(jjtree) #PlusExpr( 2) */
                 {
                   PlusExpr jjtn002 = new PlusExpr(this, JJTPLUSEXPR);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ MultExpr()/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
                 }
/*@egen*/
    )*    
}

void MultExpr()      :
{
}
{
    PowerExpr()
    (
        <MULT>/*@bgen(jjtree) #MulExpr( 2) */
               {
                 MulExpr jjtn001 = new MulExpr(this, JJTMULEXPR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ PowerExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/
        | <DIV>/*@bgen(jjtree) #DivExpr( 2) */
                {
                  DivExpr jjtn002 = new DivExpr(this, JJTDIVEXPR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ PowerExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
        | <MOD>/*@bgen(jjtree) #ModExpr( 2) */
                {
                  ModExpr jjtn003 = new ModExpr(this, JJTMODEXPR);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/ PowerExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/
    )*
}

void PowerExpr()      :
{
}
{
    Primary()
    (
        <POWER>/*@bgen(jjtree) #PowExpr( 2) */
                {
                  PowExpr jjtn001 = new PowExpr(this, JJTPOWEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ Primary()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
    )*
}

void Primary()      :
{
}
{    
    Atom()
    (
        <DOT>/*@bgen(jjtree) #AttributeRef( 2) */
              {
                AttributeRef jjtn001 = new AttributeRef(this, JJTATTRIBUTEREF);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ Atom()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/
    )*
}

void Atom()      :
{      
}
{       
    Literal()
|   LOOKAHEAD(2) SqrtStmt()
|   LOOKAHEAD(2) FunCall()
|   Id() 
|   <LPAR> Expr() <RPAR>
}

void Literal()      :
{
}
{
    IntLiteral()
|   FloatLiteral()
|   BooleanLiteral()
|   StringLiteral()
}

void IntLiteral()            :
{/*@bgen(jjtree) IntLiteral */
    IntLiteral jjtn000 = new IntLiteral(this, JJTINTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IntLiteral */
    try {
/*@egen*/
    t = <INT_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/        
    { 
        jjtn000.m_value = Integer.parseInt(t.image); 
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatLiteral()              :
{/*@bgen(jjtree) FloatLiteral */
    FloatLiteral jjtn000 = new FloatLiteral(this, JJTFLOATLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) FloatLiteral */
    try {
/*@egen*/
    t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.m_value = Float.parseFloat(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BooleanLiteral()      :
{    
}
{/*@bgen(jjtree) True */
    {
      True jjtn001 = new True(this, JJTTRUE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <TRUE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/
|/*@bgen(jjtree) False */
    {
      False jjtn002 = new False(this, JJTFALSE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/   <FALSE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/
}

void StringLiteral()               :
{/*@bgen(jjtree) StringLiteral */
    StringLiteral jjtn000 = new StringLiteral(this, JJTSTRINGLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/        
    t = <STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        String temp = new String(t.image);
        jjtn000.m_value = new String(temp.substring(1, temp.length() - 1));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/    
}

void Id()    :
{/*@bgen(jjtree) Id */
    Id jjtn000 = new Id(this, JJTID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Id */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/    { jjtn000.m_name = t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/       
}

void Suite()       :
{/*@bgen(jjtree) Suite */
  Suite jjtn000 = new Suite(this, JJTSUITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/    
}
{/*@bgen(jjtree) Suite */
    try {
/*@egen*/    
    <LCBRACE> ( LOOKAHEAD(2) VarDeclaration()        
                |  Stmt() )* <RCBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/    
}

void WhileStmt()              :
{/*@bgen(jjtree) #WhileStmt( 2) */
  WhileStmt jjtn000 = new WhileStmt(this, JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) #WhileStmt( 2) */
    try {
/*@egen*/
    <WHILE> <LPAR> Expr() <RPAR> Suite()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void IfStmt()        :
{/*@bgen(jjtree) IfStmt */
  IfStmt jjtn000 = new IfStmt(this, JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IfStmt */
    try {
/*@egen*/
    <IF> <LPAR> Expr() <RPAR> Suite() ( LOOKAHEAD(2) <ELSE> IfStmt() )* ( LOOKAHEAD(2) <ELSE> Suite() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AssertStmt()            :
{/*@bgen(jjtree) AssertStmt */
  AssertStmt jjtn000 = new AssertStmt(this, JJTASSERTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AssertStmt */
    try {
/*@egen*/
    <ASSERT> <LPAR> Expr() <RPAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SqrtStmt()          :
{/*@bgen(jjtree) SqrtStmt */
  SqrtStmt jjtn000 = new SqrtStmt(this, JJTSQRTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SqrtStmt */
    try {
/*@egen*/
    <SQRT> <LPAR> Expr() <RPAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunCall()         :
{/*@bgen(jjtree) FunCall */
  FunCall jjtn000 = new FunCall(this, JJTFUNCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) FunCall */
    try {
/*@egen*/
    Id() <LPAR> ( Expr() ( <COMMA> Expr() )* )* <RPAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/    
}

void ReturnStmt()            :
{/*@bgen(jjtree) ReturnStmt */
  ReturnStmt jjtn000 = new ReturnStmt(this, JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ReturnStmt */
    try {
/*@egen*/
    <RETURN> Expr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
