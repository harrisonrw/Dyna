/* Generated By:JJTree: Do not edit this line. OrExpr.java */

/**
 * AST Node for "or" expression
 *
 * @author Robert Harrison
 * 
 * Energy Informatics Laboratory
 * Faculty of Engineering
 * University of Regina
 * http://www.uregina.ca/engg
 */

package ca.uregina.engg.eil.dyna.interpreter;

import edu.stanford.smi.protege.model.KnowledgeBase;
import java.io.PrintStream;

public class OrExpr extends SimpleNode {
  public OrExpr(int id) {
    super(id);
  }

  public OrExpr(TBLParser p, int id) {
    super(p, id);
  }

  public void interpret() throws ParseException
  {
     jjtGetChild(0).interpret();
     
     Interpreter interp = InterpreterManager.getInterpreterManager().getInterpreter();       
     Stack stack = Stack.getStack();
     
     if (((Boolean)stack.peek()).booleanValue())
     {      
         stack.pop();
         stack.push(new Boolean(true));                               
     }
     else
     {
         // First expression was false.
     
         jjtGetChild(1).interpret();
         
         Boolean value = new Boolean(((Boolean)stack.pop()).booleanValue());
         stack.push(value);                  
     }          
  }  
}
