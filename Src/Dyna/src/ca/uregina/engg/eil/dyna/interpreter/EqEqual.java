/* Generated By:JJTree: Do not edit this line. EqEqual.java */

/**
 * AST Node for logical equals (==) expression
 *
 * @author Robert Harrison
 * 
 * Energy Informatics Laboratory
 * Faculty of Engineering
 * University of Regina
 * http://www.uregina.ca/engg
 */

package ca.uregina.engg.eil.dyna.interpreter;

import edu.stanford.smi.protege.model.KnowledgeBase;
import java.io.PrintStream;

public class EqEqual extends SimpleNode {
  public EqEqual(int id) {
    super(id);
  }

  public EqEqual(TBLParser p, int id) {
    super(p, id);
  }
  
  public void interpret() throws ParseException
  {
     jjtGetChild(0).interpret();
     jjtGetChild(1).interpret();

     Interpreter interp = InterpreterManager.getInterpreterManager().getInterpreter();        
     Stack stack = Stack.getStack();
     
     if (stack.peek() instanceof Boolean)
     {
        Boolean value = new Boolean(((Boolean)stack.pop()).booleanValue() == ((Boolean)stack.pop()).booleanValue());
         
        stack.push(value);                
     }
     else if (stack.peek() instanceof Integer)
     {
         Boolean value = new Boolean(((Integer)stack.pop()).intValue() == ((Integer)stack.pop()).intValue());
         
         stack.push(value);                 
     }
     else if (stack.peek() instanceof Float)
     {
         Boolean value = new Boolean(((Float)stack.pop()).floatValue() == ((Float)stack.pop()).floatValue());
         
         stack.push(value);                  
     }
     else if (stack.peek() instanceof String)
     {
         Boolean value = new Boolean(((String)stack.pop()).equals((String)stack.pop()));
         
         stack.push(value);
     }
  }

}
