<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="Dyna" default="default" basedir=".">
    <description>Builds, tests, and runs the project Dyna.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Dyna-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <!--
    By default, all external libraries are put on the class path and included in the dist/lib folder.
    We do not need the Protege libraries on the class path or in the dist/lib folder because they are all
    loaded when Protege runs.  Additionally, having these extra libraries causes "duplicate plugin" warnings.
    I've modified the original -do-jar-with-libraries target to only include the necessary external libraries.
    To add/remove external libraries, modify: (1) dyna_runtimeclasspath and (2) dyna_jarclasspath.
    
    Author: Robert Harrison   
    -->
    <target name="-do-jar-with-libraries" depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class+mkdist.available">
        <property name="build.classes.dir.resolved" location="${build.classes.dir}"/>
        <pathconvert property="run.classpath.without.build.classes.dir">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to=""/>
        </pathconvert>
        <pathconvert property="jar.classpath" pathsep=" ">
            <path path="${run.classpath.without.build.classes.dir}"/>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>
        <taskdef classname="org.netbeans.modules.java.j2seproject.copylibstask.CopyLibs" name="copylibs" classpath="${libs.CopyLibs.classpath}"/>
                      
        <!-- (1) Define custom run time class path.  Separate libraries with ":" -->
        <property name="dyna_runtimeclasspath" value="lib/swing-layout-1.0.jar:lib/javacc.jar"/>
        
        <!-- (2) Define custom class path.  Separate libraries with " " -->
        <property name="dyna_jarclasspath" value="lib/swing-layout-1.0.jar lib/javacc.jar"/>
        
        <!--<copylibs manifest="${manifest.file}" runtimeclasspath="${run.classpath.without.build.classes.dir}" jarfile="${dist.jar}" compress="${jar.compress}">-->
        <copylibs manifest="${manifest.file}" runtimeclasspath="${dyna_runtimeclasspath}" jarfile="${dist.jar}" compress="${jar.compress}">
            <fileset dir="${build.classes.dir}"/>
            
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <!--<attribute name="Class-Path" value="${jar.classpath}"/>-->
                <attribute name="Class-Path" value="${dyna_jarclasspath}"/>
            </manifest>
            
        </copylibs>        
        <echo>To run this application from the command line without Ant, try:</echo>        
        <property name="dist.jar.resolved" location="${dist.jar}"/>
        <echo>java -jar "${dist.jar.resolved}"</echo>        
    </target>

    <!--
    This deploys Dyna to the Protege/plugins directory after the jar file has been built.
    
    Author: Robert Harrison
    -->
    <target name="-post-jar" description="deploying Dyna to Protege/plugins">
                
        <!-- Copy documentation -->
        <copy todir="${work.dir}/plugins/ca.uregina.engg.eil.dyna/doc">
            <fileset dir="doc"/>		
        </copy>  

        <!-- Copy plugin properties -->
        <copy file="plugin.properties" todir="${work.dir}/plugins/ca.uregina.engg.eil.dyna"/>
        
        <!-- Copy external lib files -->
        <copy todir="${work.dir}/plugins/ca.uregina.engg.eil.dyna/lib">
            <fileset dir="dist/lib"/>		
        </copy> 
        
        <!-- 
        Before doing a Release Build, uncomment the line below. 
        If this line is uncommented while running Dyna within IDE, you will get
        duplicated plugin warnings.  Also, if running in IDE, then delete Dyna.jar from
        the Protege/plugins directory.
        -->
        <!--<copy file="dist/Dyna.jar" todir="${work.dir}/plugins/ca.uregina.engg.eil.dyna"/>-->
	   				        
    </target>
    
</project>
